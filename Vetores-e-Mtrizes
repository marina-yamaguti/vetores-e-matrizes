//imprime um vetor de inteiros
public void imprimeVetorInt(int[] vetor) {        
System.out.print("\n");
     for(int i = 0; i<vetor.length;i++) {
     		System.out.print("|"+vetor[i]);
     }
        System.out.print("|\n");
}

//retorna o maior valor em um vetor de inteiros
public int maiorVetorInt(int[] vetor) {  
int maior = vetor[0];
     for(int i = 1; i<vetor.length;i++){
     		if(vetor[i]>maior) {maior = vetor[i];}
     }
     return maior; //para menor valor, inverter if para <menor
}

//soma os elementos de dois vetores int
public int[] somaVetorInt(int[] vetor1, int[] vetor2) {        
if(vetor1.length<vetor2.length) {
     		int[] aux = vetor1;
     		vetor1 =vetor2;
     		vetor2=aux;
     }
     for(int i = 0; i<vetor1.length;i++) {
     		vetor1[i]=vetor1[i] + vetor2[i];
     }
 return vetor1;
}

//união entre dois vetores  
public int[] uniaoVetorInt(int[] vetor1, int[] vetor2) { 
//faz a união entre dois vetores de números inteiros, assumindo que elementos se repetem dentro dos próprios vetores (podem repetir entre (termo comum) os vetores)
int count  = 0;
     int[] temp = new int[vetor2.length]; // vetor temporário para receber os termos no vetor 2 que não estão no vetor 1
int tempIndex = 0;

int tamanho1 = vetor1.length;
     int tamanho2 = vetor2.length;

     boolean unico = true;
     for (int i = 0; i<tamanho2; i++) { //verifica quantos elementos repetidos existem entre os vetores e coloca os não repetidos do vetor 2 em um vetor temporário
for(int j= 0; j<tamanho1; j++) {
if(vetor2[i]==vetor1[j])  { // checamos cada termo do vetor 2 com todos os termos do vetor1
          		count++;
               unico = false; // o termo do vetor2 existe no vetor1
         }
}
     if(unico) {// se o termo do vetor 2 não existe no vetor 1…
temp[tempIndex]=vetor2[i]; // ...então ele é colocado em um vetor temporário
    		tempIndex++;   
     }
     unico = true;
}

int[] vetor3 = new int[tamanho1 + tamanho2 - count]; 
//declara o vetor que receberá todos os termos com o tamanho correto
     for(int i = 0; i<tamanho1; i++) {// colocando os termos do vetor 1 no novo vetor
     		vetor3[i]=vetor1[i];
     }
     for(int i = 0; i<(tamanho2-count); i++){ // colocando os termos nao repetidos do vetor 2 no novo vetor
vetor3[tamanho1+i]=temp[i];
     }
     return vetor3;
}

//diagonal principal de Matriz Quadrada
public int[] diagonalInt(int[][] matriz) {   
//imprime a diagonal principal de uma matriz quadrada de inteiros  e retorna um vetor com estes termos
int[] diag = new int[matriz.length];
     System.out.print("\n|");
     for(int i = 0; i<matriz.length;i++) {
     		diag[i]=matriz[i][i];
          System.out.print("|"+matriz[i][i]+"|");
     }
     System.out.print("|");
     return diag;
}

//de Matriz para Vetor     
public  int[] jogaNoVetor(int[][] matriz) {   
int n=matriz.length;
     int m=matriz[0].length;
     int tam=n*m; //int tam=matriz.length*matriz[0].length;
     int[] vetor=new int[tam];
int aux = 0; //estratégia: criar esta variável auxiliar para "percorrer" as posições do vetor
     for (int i = 0;i<n;i++) {
     		for(int j = 0;j<m;j++) {
          		vetor[aux]=matriz[i][j];
               aux++;
          }
}
return vetor;
}  

//de Vetor para Matriz
public  int[][] jogaNaMatriz(int[] vetor, int linha, int coluna) {   
int [][] matriz=new int[linha][coluna];
     		int aux=0;
          for (int i = 0;i<linha;i++) {
          		for(int j = 0;j<coluna;j++) {
               		matriz[i][j] = vetor[aux];
                    aux++;
               }
}
return matriz;
}


//ordenação (Bubble)
public  void main(String args[]) {
      int[] vet = {8, 19, 0, 25, 1};
int aux = 0;
     int j,i = 0;
     System.out.println("\n Vetor desordenado: ");
     for (i = 0; i < 5;i++) {
         System.out.println(" " + vet[i]);
     }
       
     for (  i = 1; i <=4; i++) {//percorre a quantidade de elementos do vetor
     		for (  j =4; j>=i ;j--) {//percorre da última posição à  posição j do vetor
     			if (vet[j]< vet[j-1]) {
          			aux = vet[j];
               		vet[j] = vet[j-1];
               		vet[j-1] = aux;
          		}
     		}
     }
     System.out.println("Vetor organizado:");
     		for (i = 0; i < vet.length;i++) {
          		System.out.println(" " + vet[i]);
          } 
}

